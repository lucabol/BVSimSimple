# /// script
# requires-python = ">=3.9"
# dependencies = ["graphviz>=0.20.1"]
# ///
"""Beach Volleyball State Machine Visualizer

This script creates a visual representation of the beach volleyball rally state machine
using Graphviz. The generated graph shows all states and their transitions, with different
colors and shapes to distinguish between serving team, receiving team, and terminal states.

Features:
- Color-coded states (blue for serving team, green for receiving team, red for terminal)
- Directed edges showing valid state transitions
- Clustered layout grouping related states
- Exports to multiple formats (PNG, SVG, PDF)
- Cross-platform compatibility (Windows/Linux)

Requirements:
- Graphviz library (installed via UV dependencies)
- Graphviz system package (install separately on your system)

Installation:
- Windows: Download from https://graphviz.org/download/ or use chocolatey: choco install graphviz
- Linux: sudo apt-get install graphviz (Ubuntu/Debian) or sudo yum install graphviz (RHEL/CentOS)
- macOS: brew install graphviz

Usage:
    uv run visualize_state_machine.py

Author: Generated by AI Assistant
Date: July 11, 2025
Python Version: 3.9+
"""

import os
import sys
from typing import Dict, List, Set, Tuple, Optional
from pathlib import Path

try:
    import graphviz
except ImportError:
    print("Error: graphviz library not found. Please install it with: pip install graphviz")
    print("Also make sure Graphviz system package is installed on your system.")
    sys.exit(1)

# Import our state machine
try:
    from BVRallyStateMachine import RallyState, VALID_TRANSITIONS, TERMINAL_STATES
except ImportError:
    print("Error: Could not import BVRallyStateMachine. Make sure it's in the same directory.")
    sys.exit(1)


def get_state_category(state: RallyState) -> str:
    """Categorize state by team and action type.
    
    Args:
        state: The rally state to categorize
        
    Returns:
        String category for styling purposes
    """
    if state in TERMINAL_STATES:
        return "terminal"
    elif state.value.startswith('s_'):
        return "serving"
    elif state.value.startswith('r_'):
        return "receiving"
    else:
        return "neutral"


def get_state_color(category: str) -> str:
    """Get color for state category.
    
    Args:
        category: State category from get_state_category()
        
    Returns:
        Color string for Graphviz
    """
    colors = {
        "serving": "#E3F2FD",      # Light blue
        "receiving": "#E8F5E8",    # Light green
        "terminal": "#FFEBEE",     # Light red
        "neutral": "#F5F5F5"       # Light gray
    }
    return colors.get(category, "#FFFFFF")


def get_state_border_color(category: str) -> str:
    """Get border color for state category.
    
    Args:
        category: State category from get_state_category()
        
    Returns:
        Border color string for Graphviz
    """
    colors = {
        "serving": "#1976D2",      # Blue
        "receiving": "#388E3C",    # Green
        "terminal": "#D32F2F",     # Red
        "neutral": "#757575"       # Gray
    }
    return colors.get(category, "#000000")


def get_state_shape(category: str) -> str:
    """Get shape for state category.
    
    Args:
        category: State category from get_state_category()
        
    Returns:
        Shape string for Graphviz
    """
    shapes = {
        "serving": "box",
        "receiving": "ellipse",
        "terminal": "doublecircle",
        "neutral": "diamond"
    }
    return shapes.get(category, "box")


def format_state_label(state: RallyState) -> str:
    """Format state name for display.
    
    Args:
        state: The rally state to format
        
    Returns:
        Formatted label string
    """
    # Remove prefix and convert to title case
    label = state.value.replace('s_', '').replace('r_', '').replace('terminal_', '')
    label = label.replace('_', ' ').title()
    
    # Add team prefix for clarity
    if state.value.startswith('s_'):
        label = f"S: {label}"
    elif state.value.startswith('r_'):
        label = f"R: {label}"
    elif state.value.startswith('terminal_'):
        label = f"END: {label}"
    
    return label


def group_states_by_phase(states: List[RallyState]) -> Dict[str, List[RallyState]]:
    """Group states by volleyball phase for better layout.
    
    Args:
        states: List of states to group
        
    Returns:
        Dictionary mapping phase names to lists of states
    """
    phases = {
        "serve": [],
        "reception": [],
        "set": [],
        "attack": [],
        "defense": [],
        "block": [],
        "transition": [],
        "terminal": []
    }
    
    for state in states:
        state_val = state.value.lower()
        
        if state in TERMINAL_STATES:
            phases["terminal"].append(state)
        elif "serve" in state_val:
            phases["serve"].append(state)
        elif "reception" in state_val:
            phases["reception"].append(state)
        elif "set" in state_val:
            phases["set"].append(state)
        elif "attack" in state_val:
            phases["attack"].append(state)
        elif "dig" in state_val:
            phases["defense"].append(state)
        elif "block" in state_val:
            phases["block"].append(state)
        elif "transition" in state_val:
            phases["transition"].append(state)
        else:
            phases["terminal"].append(state)
    
    # Remove empty phases
    return {phase: states for phase, states in phases.items() if states}


def create_state_machine_graph(
    output_dir: str = "output",
    filename: str = "bv_state_machine",
    format: str = "png"
) -> str:
    """Create a visual representation of the state machine.
    
    Args:
        output_dir: Directory to save output files
        filename: Base filename for output
        format: Output format (png, svg, pdf)
        
    Returns:
        Path to the generated file
    """
    # Create output directory
    Path(output_dir).mkdir(exist_ok=True)
    
    # Create Graphviz digraph
    dot = graphviz.Digraph(
        name=filename,
        comment='Beach Volleyball Rally State Machine',
        format=format
    )
    
    # Set graph attributes
    dot.attr(
        rankdir='TB',           # Top to bottom layout
        splines='ortho',        # Orthogonal edges
        nodesep='0.8',          # Node separation
        ranksep='1.2',          # Rank separation
        fontname='Arial',       # Font
        fontsize='12',          # Font size
        bgcolor='white'         # Background color
    )
    
    # Set default node attributes
    dot.attr(
        'node',
        fontname='Arial',
        fontsize='10',
        style='filled',
        margin='0.2'
    )
    
    # Set default edge attributes
    dot.attr(
        'edge',
        fontname='Arial',
        fontsize='8',
        color='gray40',
        arrowsize='0.8'
    )
    
    # Get all states
    all_states = list(RallyState)
    
    # Group states by phase
    phase_groups = group_states_by_phase(all_states)
    
    # Create subgraphs for each phase
    for phase_name, phase_states in phase_groups.items():
        with dot.subgraph(name=f'cluster_{phase_name}') as cluster:
            cluster.attr(
                label=f'{phase_name.title()} Phase',
                style='rounded,filled',
                fillcolor='lightgray',
                fontsize='12',
                fontname='Arial Bold'
            )
            
            # Add states to this phase
            for state in phase_states:
                category = get_state_category(state)
                
                cluster.node(
                    state.value,
                    label=format_state_label(state),
                    fillcolor=get_state_color(category),
                    color=get_state_border_color(category),
                    shape=get_state_shape(category),
                    penwidth='2'
                )
    
    # Add transitions
    for from_state, to_states in VALID_TRANSITIONS.items():
        for to_state in to_states:
            # Different edge styles for different transition types
            edge_style = {}
            
            # Terminal transitions
            if to_state in TERMINAL_STATES:
                edge_style['color'] = 'red'
                edge_style['penwidth'] = '2'
            # Team switches
            elif (from_state.value.startswith('s_') and to_state.value.startswith('r_')) or \
                 (from_state.value.startswith('r_') and to_state.value.startswith('s_')):
                edge_style['color'] = 'blue'
                edge_style['penwidth'] = '1.5'
            # Same team transitions
            else:
                edge_style['color'] = 'gray60'
                edge_style['penwidth'] = '1'
            
            dot.edge(from_state.value, to_state.value, **edge_style)
    
    # Add legend
    with dot.subgraph(name='cluster_legend') as legend:
        legend.attr(
            label='Legend',
            style='rounded,filled',
            fillcolor='lightyellow',
            fontsize='12',
            fontname='Arial Bold'
        )
        
        # Legend nodes
        legend.node('legend_serving', 'Serving Team\n(Team A)', 
                   fillcolor=get_state_color('serving'),
                   color=get_state_border_color('serving'),
                   shape=get_state_shape('serving'))
        
        legend.node('legend_receiving', 'Receiving Team\n(Team B)', 
                   fillcolor=get_state_color('receiving'),
                   color=get_state_border_color('receiving'),
                   shape=get_state_shape('receiving'))
        
        legend.node('legend_terminal', 'Terminal\n(End Rally)', 
                   fillcolor=get_state_color('terminal'),
                   color=get_state_border_color('terminal'),
                   shape=get_state_shape('terminal'))
    
    # Render the graph
    output_path = dot.render(directory=output_dir, cleanup=True)
    
    return output_path


def create_simplified_graph(
    output_dir: str = "output",
    filename: str = "bv_state_machine_simple",
    format: str = "png"
) -> str:
    """Create a simplified version focusing on main flow.
    
    Args:
        output_dir: Directory to save output files
        filename: Base filename for output
        format: Output format (png, svg, pdf)
        
    Returns:
        Path to the generated file
    """
    # Create output directory
    Path(output_dir).mkdir(exist_ok=True)
    
    # Create simplified digraph
    dot = graphviz.Digraph(
        name=filename,
        comment='Beach Volleyball Rally State Machine - Simplified',
        format=format
    )
    
    # Set graph attributes for cleaner look
    dot.attr(
        rankdir='TB',
        splines='true',
        nodesep='1.0',
        ranksep='1.5',
        fontname='Arial',
        fontsize='14',
        bgcolor='white'
    )
    
    # Key states for simplified view
    key_states = [
        RallyState.S_SERVE_READY,
        RallyState.S_SERVE_ACE,
        RallyState.S_SERVE_ERROR,
        RallyState.S_SERVE_IN_PLAY,
        RallyState.R_RECEPTION_GOOD,
        RallyState.R_SET_GOOD,
        RallyState.R_ATTACK_IN_PLAY,
        RallyState.R_ATTACK_KILL,
        RallyState.S_DIG_GOOD,
        RallyState.S_TRANSITION_SET,
        RallyState.S_ATTACK_IN_PLAY,
        RallyState.S_ATTACK_KILL
    ]
    
    # Add key nodes
    for state in key_states:
        category = get_state_category(state)
        dot.node(
            state.value,
            label=format_state_label(state),
            fillcolor=get_state_color(category),
            color=get_state_border_color(category),
            shape=get_state_shape(category),
            style='filled',
            fontsize='12',
            penwidth='2'
        )
    
    # Add key transitions
    key_transitions = [
        (RallyState.S_SERVE_READY, RallyState.S_SERVE_ACE),
        (RallyState.S_SERVE_READY, RallyState.S_SERVE_ERROR),
        (RallyState.S_SERVE_READY, RallyState.S_SERVE_IN_PLAY),
        (RallyState.S_SERVE_IN_PLAY, RallyState.R_RECEPTION_GOOD),
        (RallyState.R_RECEPTION_GOOD, RallyState.R_SET_GOOD),
        (RallyState.R_SET_GOOD, RallyState.R_ATTACK_IN_PLAY),
        (RallyState.R_ATTACK_IN_PLAY, RallyState.S_DIG_GOOD),
        (RallyState.S_DIG_GOOD, RallyState.S_TRANSITION_SET),
        (RallyState.S_TRANSITION_SET, RallyState.S_ATTACK_IN_PLAY),
        (RallyState.R_SET_GOOD, RallyState.R_ATTACK_KILL),
        (RallyState.S_ATTACK_IN_PLAY, RallyState.S_ATTACK_KILL)
    ]
    
    for from_state, to_state in key_transitions:
        if to_state in TERMINAL_STATES:
            dot.edge(from_state.value, to_state.value, color='red', penwidth='2')
        else:
            dot.edge(from_state.value, to_state.value, color='blue', penwidth='1.5')
    
    # Render the graph
    output_path = dot.render(directory=output_dir, cleanup=True)
    
    return output_path


def main() -> int:
    """Main entry point for the visualization script.
    
    Returns:
        Exit code (0 for success, 1 for failure)
    """
    try:
        print("🏐 Beach Volleyball State Machine Visualizer")
        print("=" * 50)
        
        # Check if Graphviz is available
        try:
            # Test if graphviz system package is available
            import subprocess
            result = subprocess.run(['dot', '-V'], capture_output=True, text=True)
            if result.returncode != 0:
                print("⚠️  Warning: Graphviz system package not found.")
                print("Please install Graphviz on your system:")
                print("- Windows: https://graphviz.org/download/ or 'choco install graphviz'")
                print("- Linux: 'sudo apt-get install graphviz' or 'sudo yum install graphviz'")
                print("- macOS: 'brew install graphviz'")
                return 1
        except FileNotFoundError:
            print("⚠️  Warning: Graphviz system package not found.")
            print("Please install Graphviz on your system first.")
            return 1
        
        # Create output directory
        output_dir = "graphs"
        Path(output_dir).mkdir(exist_ok=True)
        
        # Generate full state machine graph
        print("📊 Generating full state machine graph...")
        full_graph_path = create_state_machine_graph(
            output_dir=output_dir,
            filename="bv_state_machine_full",
            format="png"
        )
        print(f"✅ Full graph saved to: {full_graph_path}")
        
        # Generate simplified graph
        print("📊 Generating simplified state machine graph...")
        simple_graph_path = create_simplified_graph(
            output_dir=output_dir,
            filename="bv_state_machine_simple",
            format="png"
        )
        print(f"✅ Simplified graph saved to: {simple_graph_path}")
        
        # Generate SVG version for web viewing
        print("📊 Generating SVG version...")
        svg_path = create_state_machine_graph(
            output_dir=output_dir,
            filename="bv_state_machine_web",
            format="svg"
        )
        print(f"✅ SVG graph saved to: {svg_path}")
        
        # Print statistics
        print(f"\n📈 State Machine Statistics:")
        print(f"  Total states: {len(list(RallyState))}")
        print(f"  Terminal states: {len(TERMINAL_STATES)}")
        print(f"  Continuation states: {len(list(RallyState)) - len(TERMINAL_STATES)}")
        print(f"  Total transitions: {sum(len(transitions) for transitions in VALID_TRANSITIONS.values())}")
        
        print(f"\n🎯 Visualization complete!")
        print(f"📁 Output directory: {Path(output_dir).absolute()}")
        
        # Try to open the file on Windows
        if sys.platform == "win32":
            try:
                os.startfile(full_graph_path)
                print("🖼️  Opening graph in default image viewer...")
            except:
                print("💡 Tip: Open the PNG files with your preferred image viewer")
        else:
            print("💡 Tip: Open the PNG files with your preferred image viewer")
            print(f"💡 Or view the SVG file in a web browser: file://{Path(svg_path).absolute()}")
        
        return 0
        
    except Exception as e:
        print(f"❌ Error generating visualization: {e}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
